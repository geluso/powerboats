{"version":3,"sources":["thirdjs/seedrandom.js"],"names":["pool","math","width","chunks","significance","overflow","startdenom","seedrandom","seed","use_entropy","key","arc4","mixkey","flatten","arguments","length","Date","getTime","window","ARC4","S","random","n","g","d","x","t","u","me","keylen","i","j","m","c","lowbits","getnext","count","s","r","obj","depth","result","prop","typ","indexOf","push","e","smear","charCodeAt","String","fromCharCode","pow","Math"],"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","file":"seedrandom.62e0345b.map","sourceRoot":"..","sourcesContent":["// seedrandom.js version 2.0.\n// Author: David Bau 4/2/2011\n//\n// Defines a method Math.seedrandom() that, when called, substitutes\n// an explicitly seeded RC4-based algorithm for Math.random().  Also\n// supports automatic seeding from local or network sources of entropy.\n//\n// Usage:\n//\n//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>\n//\n//   Math.seedrandom('yipee'); Sets Math.random to a function that is\n//                             initialized using the given explicit seed.\n//\n//   Math.seedrandom();        Sets Math.random to a function that is\n//                             seeded using the current time, dom state,\n//                             and other accumulated local entropy.\n//                             The generated seed string is returned.\n//\n//   Math.seedrandom('yowza', true);\n//                             Seeds using the given explicit seed mixed\n//                             together with accumulated entropy.\n//\n//   <script src=\"http://bit.ly/srandom-512\"></script>\n//                             Seeds using physical random bits downloaded\n//                             from random.org.\n//\n//   <script src=\"https://jsonlib.appspot.com/urandom?callback=Math.seedrandom\">\n//   </script>                 Seeds using urandom bits from call.jsonlib.com,\n//                             which is faster than random.org.\n//\n// Examples:\n//\n//   Math.seedrandom(\"hello\");            // Use \"hello\" as the seed.\n//   document.write(Math.random());       // Always 0.5463663768140734\n//   document.write(Math.random());       // Always 0.43973793770592234\n//   var rng1 = Math.random;              // Remember the current prng.\n//\n//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.\n//   document.write(Math.random());       // Pretty much unpredictable.\n//\n//   Math.random = rng1;                  // Continue \"hello\" prng sequence.\n//   document.write(Math.random());       // Always 0.554769432473455\n//\n//   Math.seedrandom(autoseed);           // Restart at the previous seed.\n//   document.write(Math.random());       // Repeat the 'unpredictable' value.\n//\n// Notes:\n//\n// Each time seedrandom('arg') is called, entropy from the passed seed\n// is accumulated in a pool to help generate future seeds for the\n// zero-argument form of Math.seedrandom, so entropy can be injected over\n// time by calling seedrandom with explicit data repeatedly.\n//\n// On speed - This javascript implementation of Math.random() is about\n// 3-10x slower than the built-in Math.random() because it is not native\n// code, but this is typically fast enough anyway.  Seeding is more expensive,\n// especially if you use auto-seeding.  Some details (timings on Chrome 4):\n//\n// Our Math.random()            - avg less than 0.002 milliseconds per call\n// seedrandom('explicit')       - avg less than 0.5 milliseconds per call\n// seedrandom('explicit', true) - avg less than 2 milliseconds per call\n// seedrandom()                 - avg about 38 milliseconds per call\n//\n// LICENSE (BSD):\n//\n// Copyright 2010 David Bau, all rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n// \n//   1. Redistributions of source code must retain the above copyright\n//      notice, this list of conditions and the following disclaimer.\n//\n//   2. Redistributions in binary form must reproduce the above copyright\n//      notice, this list of conditions and the following disclaimer in the\n//      documentation and/or other materials provided with the distribution.\n// \n//   3. Neither the name of this module nor the names of its contributors may\n//      be used to endorse or promote products derived from this software\n//      without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n/**\n * All code is in an anonymous closure to keep the global namespace clean.\n *\n * @param {number=} overflow \n * @param {number=} startdenom\n */\n(function (pool, math, width, chunks, significance, overflow, startdenom) {\n  //\n  // seedrandom()\n  // This is the seedrandom function described above.\n  //\n  math['seedrandom'] = function seedrandom(seed, use_entropy) {\n    var key = [];\n    var arc4;\n\n    // Flatten the seed string or build one from local entropy if needed.\n    seed = mixkey(flatten(\n      use_entropy ? [seed, pool] :\n        arguments.length ? seed :\n          [new Date().getTime(), pool, window], 3), key);\n\n    // Use the seed to initialize an ARC4 generator.\n    arc4 = new ARC4(key);\n\n    // Mix the randomness into accumulated entropy.\n    mixkey(arc4.S, pool);\n\n    // Override Math.random\n\n    // This function returns a random double in [0, 1) that contains\n    // randomness in every bit of the mantissa of the IEEE 754 value.\n\n    math['random'] = function random() {  // Closure to return a random double:\n      var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48\n      var d = startdenom;                 //   and denominator d = 2 ^ 48.\n      var x = 0;                          //   and no 'extra last byte'.\n      while (n < significance) {          // Fill up all significant digits by\n        n = (n + x) * width;              //   shifting numerator and\n        d *= width;                       //   denominator and generating a\n        x = arc4.g(1);                    //   new least-significant-byte.\n      }\n      while (n >= overflow) {             // To avoid rounding up, before adding\n        n /= 2;                           //   last byte, shift everything\n        d /= 2;                           //   right using integer math until\n        x >>>= 1;                         //   we have exactly the desired bits.\n      }\n      return (n + x) / d;                 // Form the number within [0, 1).\n    };\n\n    // Return the seed that was used\n    return seed;\n  };\n\n  //\n  // ARC4\n  //\n  // An ARC4 implementation.  The constructor takes a key in the form of\n  // an array of at most (width) integers that should be 0 <= x < (width).\n  //\n  // The g(count) method returns a pseudorandom integer that concatenates\n  // the next (count) outputs from ARC4.  Its return value is a number x\n  // that is in the range 0 <= x < (width ^ count).\n  //\n  /** @constructor */\n  function ARC4(key) {\n    var t, u, me = this, keylen = key.length;\n    var i = 0, j = me.i = me.j = me.m = 0;\n    me.S = [];\n    me.c = [];\n\n    // The empty key [] is treated as [0].\n    if (!keylen) { key = [keylen++]; }\n\n    // Set up S using the standard key scheduling algorithm.\n    while (i < width) { me.S[i] = i++; }\n    for (i = 0; i < width; i++) {\n      t = me.S[i];\n      j = lowbits(j + t + key[i % keylen]);\n      u = me.S[j];\n      me.S[i] = u;\n      me.S[j] = t;\n    }\n\n    // The \"g\" method returns the next (count) outputs as one number.\n    me.g = function getnext(count) {\n      var s = me.S;\n      var i = lowbits(me.i + 1); var t = s[i];\n      var j = lowbits(me.j + t); var u = s[j];\n      s[i] = u;\n      s[j] = t;\n      var r = s[lowbits(t + u)];\n      while (--count) {\n        i = lowbits(i + 1); t = s[i];\n        j = lowbits(j + t); u = s[j];\n        s[i] = u;\n        s[j] = t;\n        r = r * width + s[lowbits(t + u)];\n      }\n      me.i = i;\n      me.j = j;\n      return r;\n    };\n    // For robust unpredictability discard an initial batch of values.\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\n    me.g(width);\n  }\n\n  //\n  // flatten()\n  // Converts an object tree to nested arrays of strings.\n  //\n  /** @param {Object=} result \n    * @param {string=} prop\n    * @param {string=} typ */\n  function flatten(obj, depth, result, prop, typ) {\n    result = [];\n    typ = typeof (obj);\n    if (depth && typ == 'object') {\n      for (prop in obj) {\n        if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)\n          try { result.push(flatten(obj[prop], depth - 1)); } catch (e) { }\n        }\n      }\n    }\n    return (result.length ? result : obj + (typ != 'string' ? '\\0' : ''));\n  }\n\n  //\n  // mixkey()\n  // Mixes a string seed into a key that is an array of integers, and\n  // returns a shortened string seed that is equivalent to the result key.\n  //\n  /** @param {number=} smear \n    * @param {number=} j */\n  function mixkey(seed, key, smear, j) {\n    seed += '';                         // Ensure the seed is a string\n    smear = 0;\n    for (j = 0; j < seed.length; j++) {\n      key[lowbits(j)] =\n        lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));\n    }\n    seed = '';\n    for (j in key) { seed += String.fromCharCode(key[j]); }\n    return seed;\n  }\n\n  //\n  // lowbits()\n  // A quick \"n mod width\" for width a power of 2.\n  //\n  function lowbits(n) { return n & (width - 1); }\n\n  //\n  // The following constants are related to IEEE 754 limits.\n  //\n  startdenom = math.pow(width, chunks);\n  significance = math.pow(2, significance);\n  overflow = significance * 2;\n\n  //\n  // When seedrandom.js is loaded, we immediately mix a few bits\n  // from the built-in RNG into the entropy pool.  Because we do\n  // not want to intefere with determinstic PRNG state later,\n  // seedrandom will not call math.random on its own again after\n  // initialization.\n  //\n  mixkey(math.random(), pool);\n\n  // End anonymous scope, and pass initial values.\n})(\n  [],   // pool: entropy pool starts empty\n  Math, // math: package containing random, pow, and seedrandom\n  256,  // width: each RC4 output is 0 <= x < 256\n  6,    // chunks: at least six RC4 outputs for each double\n  52    // significance: there are 52 significant digits in a double\n);\n"]}